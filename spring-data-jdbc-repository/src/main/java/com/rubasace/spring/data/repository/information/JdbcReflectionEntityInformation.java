/*
 *
 *  * Copyright (C) 2017 Ruben Pahino Verdugo <ruben.pahino.verdugo@gmail.com>
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  * http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *
 */

package com.rubasace.spring.data.repository.information;

import com.rubasace.spring.data.repository.EntityType;
import com.rubasace.spring.data.repository.annotation.AutoGenerated;
import com.rubasace.spring.data.repository.annotation.ReadOnlyEntity;

import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.List;

public class JdbcReflectionEntityInformation<T, ID extends Serializable> extends AbstractJdbcEntityInformation<T, ID> {

    private static final Class<? extends Annotation> READ_ONLY_ANNOTATION = ReadOnlyEntity.class;

    private static final Class<? extends Annotation> AUTO_GENERATED_ANNOTATION = AutoGenerated.class;

    public JdbcReflectionEntityInformation(Class<T> domainClass) {
        super(domainClass);
    }

    protected EntityType calculateEntityType(Class<T> entityClass, List<Field> idFields) {
        if (entityClass.isAnnotationPresent(READ_ONLY_ANNOTATION)) {
            return EntityType.READ_ONLY;
        }
        if (idFields.get(0).isAnnotationPresent(AUTO_GENERATED_ANNOTATION)) {
            assertUniqueId("Only single key classes can use autogenerated primary keys");
            return EntityType.AUTO_INCREMENTAL;
        }
        return EntityType.MANUALLY_ASSIGNED;
    }
}
